<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南院大王</title>
  
  <subtitle>十年饮冰，难凉热血。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://itnote.tech/"/>
  <updated>2020-12-29T12:41:41.414Z</updated>
  <id>http://itnote.tech/</id>
  
  <author>
    <name>Shawn Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020年终总结</title>
    <link href="http://itnote.tech/2020/12/29/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://itnote.tech/2020/12/29/2020年终总结/</id>
    <published>2020-12-29T12:29:00.000Z</published>
    <updated>2020-12-29T12:41:41.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h2><ol><li>QuantWorld完成开发, 目前在维护, 算是阶段性胜利, 因为架构和性能问题, 后期也不打算长时间维护.</li><li>Xronos继续开发, 目前有所进展.</li><li>年末几个月看了4本技术书, 也不算太内疚.</li><li>顺利结婚.</li></ol><h2 id="Bad"><a href="#Bad" class="headerlink" title="Bad"></a>Bad</h2><ol><li>亲友多人受伤, 琐事连连.</li><li>赚钱目标未达成.</li><li>Xronos进展缓慢, 没有大块时间开发.</li></ol><h2 id="Expected"><a href="#Expected" class="headerlink" title="Expected"></a>Expected</h2><ol><li>系统学习Java技术.</li><li>希望能尽快完成Xronos并上线, 我希望是3个月内.</li><li>希望能提升收入.</li><li>希望家人平安.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Good&quot;&gt;&lt;a href=&quot;#Good&quot; class=&quot;headerlink&quot; title=&quot;Good&quot;&gt;&lt;/a&gt;Good&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;QuantWorld完成开发, 目前在维护, 算是阶段性胜利, 因为架构和性能问题, 后期也不打算长时间维护.&lt;
      
    
    </summary>
    
      <category term="年终总结" scheme="http://itnote.tech/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="2020" scheme="http://itnote.tech/tags/2020/"/>
    
  </entry>
  
  <entry>
    <title>如何在cucumber UI case中录制视频</title>
    <link href="http://itnote.tech/2020/09/21/%E5%A6%82%E4%BD%95%E5%9C%A8cucumber-UI-case%E4%B8%AD%E5%BD%95%E5%88%B6%E8%A7%86%E9%A2%91/"/>
    <id>http://itnote.tech/2020/09/21/如何在cucumber-UI-case中录制视频/</id>
    <published>2020-09-21T03:34:00.000Z</published>
    <updated>2020-09-29T12:59:03.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在工作中会写一些UI自动化测试的case来测试, 但是UI测试的时候, case会失败, 此时如果有个截图或者录屏就很有用. 由于在工作中使用的是cucumber, 所以代码是在cucumber中实现的, 但是作为工具, 也可以独立使用.</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>在UI case中, 如果给失败的case进行录屏, 那么可以更加有效, 有针对性地对case的失败行为进行分析. 能清除地知道,在执行某些步骤的时候, 失败了.</p><p>因此方案如下:</p><ol><li>对每一个case进行录屏</li><li>将失败的case的录屏嵌入到cucumber的报告中.</li><li>展示失败case的视频, 分析问题.</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>在此我使用的是monte-screen-recorder这个工具, 因为此工具的录屏是avi, 无法直接将视频在html页面上渲染, 所以我使用ffmpeg的java工具包, 将avi转码成mp4.<br>gradle的依赖是</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'com.github.stephenc.monte'</span>, name: <span class="string">'monte-screen-recorder'</span>, version: <span class="string">'0.7.7.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'net.masterthought'</span>, name: <span class="string">'cucumber-reporting'</span>, version: <span class="string">'4.10.0'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'ws.schild'</span>, name: <span class="string">'jave-all-deps'</span>, version: <span class="string">'3.0.1'</span></span><br></pre></td></tr></table></figure><p>直接贴代码了…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenRecorderUtil</span> <span class="keyword">extends</span> <span class="title">ScreenRecorder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ScreenRecorder screenRecorder;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String scenarioName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String videoName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECORDING_PATH = <span class="string">"./build/recording"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DPMScreenRecorderUtil</span><span class="params">(GraphicsConfiguration cfg, Rectangle captureArea, Format fileFormat,</span></span></span><br><span class="line"><span class="function"><span class="params">                               Format screenFormat, Format mouseFormat, Format audioFormat, File movieFolder, String scenarioName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, AWTException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(cfg, captureArea, fileFormat, screenFormat, mouseFormat, audioFormat, movieFolder);</span><br><span class="line">    <span class="keyword">this</span>.scenarioName = scenarioName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> File <span class="title">createMovieFile</span><span class="params">(Format fileFormat)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!movieFolder.exists()) &#123;</span><br><span class="line">      movieFolder.mkdirs();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!movieFolder.isDirectory()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"\""</span> + movieFolder + <span class="string">"\" is not a directory."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH.mm.ss"</span>);</span><br><span class="line">    videoName = scenarioName + <span class="string">"-"</span> + dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">"."</span> + Registry.getInstance().getExtension(fileFormat);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File(movieFolder,</span><br><span class="line">        scenarioName + <span class="string">"-"</span> + dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">"."</span> + Registry.getInstance().getExtension(fileFormat));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startRecord</span><span class="params">(String scenario)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(RECORDING_PATH);</span><br><span class="line">    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();</span><br><span class="line">    <span class="keyword">int</span> width = screenSize.width;</span><br><span class="line">    <span class="keyword">int</span> height = screenSize.height;</span><br><span class="line"></span><br><span class="line">    Rectangle captureSize = <span class="keyword">new</span> Rectangle(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">    GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().</span><br><span class="line">        getDefaultScreenDevice()</span><br><span class="line">        .getDefaultConfiguration();</span><br><span class="line">    screenRecorder = <span class="keyword">new</span> DPMScreenRecorderUtil(gc, captureSize,</span><br><span class="line">        <span class="keyword">new</span> Format(MediaTypeKey, FormatKeys.MediaType.FILE, MimeTypeKey, MIME_AVI),</span><br><span class="line">        <span class="keyword">new</span> Format(MediaTypeKey, FormatKeys.MediaType.VIDEO, EncodingKey, ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE,</span><br><span class="line">            CompressorNameKey, ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE,</span><br><span class="line">            DepthKey, (<span class="keyword">int</span>) <span class="number">24</span>, FrameRateKey, Rational.valueOf(<span class="number">15</span>),</span><br><span class="line">            QualityKey, <span class="number">1.0f</span>,</span><br><span class="line">            KeyFrameIntervalKey, (<span class="keyword">int</span>) (<span class="number">15</span> * <span class="number">60</span>)),</span><br><span class="line">        <span class="keyword">new</span> Format(MediaTypeKey, FormatKeys.MediaType.VIDEO, EncodingKey, <span class="string">"black"</span>, FrameRateKey, Rational.valueOf(<span class="number">30</span>)),</span><br><span class="line">        <span class="keyword">null</span>, file, scenario);</span><br><span class="line">    screenRecorder.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stopRecord</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    screenRecorder.stop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getRecord() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> FileUtil.readAsByteArray(convertAviToMP4(<span class="keyword">new</span> File(RECORDING_PATH + <span class="string">"/"</span> + videoName)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> File <span class="title">convertAviToMP4</span><span class="params">(File source)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File target = <span class="keyword">new</span> File(RECORDING_PATH + <span class="string">"/"</span> + <span class="string">"target.mp4"</span>);</span><br><span class="line">    AudioAttributes audio = <span class="keyword">new</span> AudioAttributes();</span><br><span class="line">    audio.setCodec(<span class="string">"libmp3lame"</span>);</span><br><span class="line">    audio.setBitRate(<span class="number">64000</span>);</span><br><span class="line">    audio.setChannels(<span class="number">1</span>);</span><br><span class="line">    audio.setSamplingRate(<span class="number">22050</span>);</span><br><span class="line">    VideoAttributes video = <span class="keyword">new</span> VideoAttributes();</span><br><span class="line">    video.setCodec(<span class="string">"libx264"</span>);   <span class="comment">//编码设置</span></span><br><span class="line">    video.setBitRate(<span class="number">1920</span> * <span class="number">1080</span>); <span class="comment">//比特率设置</span></span><br><span class="line">    video.setFrameRate(<span class="number">120</span>);</span><br><span class="line">    video.setPixelFormat(<span class="string">"yuv420p"</span>);</span><br><span class="line">    EncodingAttributes attrs = <span class="keyword">new</span> EncodingAttributes();</span><br><span class="line">    attrs.setOutputFormat(<span class="string">"mp4"</span>);</span><br><span class="line">    attrs.setInputFormat(<span class="string">"avi"</span>);</span><br><span class="line">    attrs.setAudioAttributes(audio);</span><br><span class="line">    attrs.setVideoAttributes(video);</span><br><span class="line">    Encoder encoder = <span class="keyword">new</span> Encoder();</span><br><span class="line">    MultimediaObject multimediaObject = <span class="keyword">new</span> MultimediaObject(source);</span><br><span class="line">    encoder.encode(multimediaObject, target, attrs);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cucumber的case中可以使用hook类, 将case的视频嵌入的报告中, 示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CucumberHooks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span>(order = Integer.MAX_VALUE)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRecording</span><span class="params">(Scenario scenario)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Boolean.parseBoolean(System.getProperty(<span class="string">"recordVideo"</span>))) &#123;</span><br><span class="line">      <span class="comment">// start recording</span></span><br><span class="line">      ScreenRecorderUtil.startRecord(scenario.getName());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="meta">@After</span>(order = Integer.MAX_VALUE)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRecording</span><span class="params">(Scenario scenario)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    DPMScreenRecorderUtil.stopRecord();</span><br><span class="line">    <span class="keyword">if</span> (scenario.isFailed()) &#123;</span><br><span class="line">      scenario.embed(DPMScreenRecorderUtil.getRecord(), <span class="string">"video/mp4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在工作中会写一些UI自动化测试的case来测试, 但是UI测试的时候, case会失败, 此时如果有个截图或者录屏就很有用. 由于在工作中使
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="http://itnote.tech/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Xronos架构设计</title>
    <link href="http://itnote.tech/2020/09/08/Xonos%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://itnote.tech/2020/09/08/Xonos架构设计/</id>
    <published>2020-09-08T12:50:00.000Z</published>
    <updated>2021-01-25T03:22:42.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Xronos是基于宽界(QuantWorld)的进阶版本非开源量化交易系统，针对宽界的设计瓶颈而设计的系统。宽界系统的瓶颈：</p><ol><li><strong>过于依赖分发器。</strong>分发器承担了大量的事件分发任务，导致队列的消息不能及时被消费，最终导致各类消息被消费时与入队时有比较大的延迟（毫秒-秒级别），这是无法容忍的。如果某个subscriber执行的时间过长，则大大影响系统性能，这种同步且阻塞的机制是核心组件的上巨大缺陷。</li><li><strong>过于依赖多线程。</strong>前面的文章有提到过并发和并行的区别，过于依赖并发的多线程容易导致共享内存的争抢. 对于共享内存，我们可使用原子性操作避免。即便如此，在某个线程在执行任务时，另一个线性却修改了共享变量，此时影响了当前线程对共享变量的读取，这样无法容忍。但如果对线程加锁，又会影响执行效率，即此时有线程等待或者自旋，浪费不少资源。</li><li><strong>单机系统设计。</strong>单机系统设计可以在小系统上设计，但是较为庞大的系统设计是需要切分组件，服务拆分的, 而微服务设计则满足这个需求. 多个服务的拆分, 且服务之间使用消息中间件异步通信, 使得服务之间的耦合性更低, 服务消费能力更强, 执行效率更高.</li><li><strong>事件只消费一次。</strong>当初宽界设计之初，没有使用<code>Kafka</code>等消息中间件有几个考量，一是容易加大系统复杂度，二是<code>Kafka</code>的性能并不能达到自己所需（<code>Kafka</code>是一个堆依赖性高的消息中间件），因此自设计了一个消息分发器。在消息分发的时候并没有将事件保存，导致后续的回测系统难以开展设计，不仅加大了调试难度，也加大了策略的风险。</li><li><strong>JVM 频繁GC问题。</strong>JVM频繁GC问题会导致系统延迟太高（毫秒级），响应时间增大，因此系统在内存管理，JVM调优，以及系统设计上，程序编码上需要更加地精细. </li></ol><p>针对以上五个问题，都会在Xronos中解决。</p><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li>低耦合</li><li>单线程</li><li>Consumner centric</li><li>Lambda架构</li><li>Off-Heap<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-66.png" alt="Xronos Architecture" title>                </div>                <div class="image-caption">Xronos Architecture</div>            </figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;Xronos是基于宽界(QuantWorld)的进阶版本非开源量化交易系统，针对宽界的设计瓶颈而设计的系统。宽界系统的瓶颈：&lt;/p&gt;
&lt;ol
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Xronos" scheme="http://itnote.tech/tags/Xronos/"/>
    
  </entry>
  
  <entry>
    <title>宽界系统介绍</title>
    <link href="http://itnote.tech/2020/07/27/%E5%AE%BD%E7%95%8C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
    <id>http://itnote.tech/2020/07/27/宽界系统介绍/</id>
    <published>2020-07-27T12:41:00.000Z</published>
    <updated>2020-08-10T04:39:49.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="宽界-QuantWorld"><a href="#宽界-QuantWorld" class="headerlink" title="宽界(QuantWorld)"></a>宽界(QuantWorld)</h1><p>宽界系统（以下简称宽界）是一个基于Java的开源量化交易系统，系统的完成情况可以参考组件部分。宽界主要由Admin, Broker, CEP, OMS, Application和BackTestEngine等6个部分组成。目前只完成了系统的大部分基础框架，一些细节功能还在完善中。<br>在量化交易领域，看到了很多基于Python的系统，却很少有基于Java实现的系统，所以这是我设计宽界的初衷。<br>宽界目前只完成了数字货币的火币API的接入，后续会接入更多交易所的API，在框架的设计之初，股票期货等也是可以接入的，这也在未来的计划之中，非常欢迎有志的朋友一起合作，贡献代码。</p><h1 id="宽界提供什么？"><a href="#宽界提供什么？" class="headerlink" title="宽界提供什么？"></a>宽界提供什么？</h1><ul><li>注册、登录、个人账户。</li><li>数字火币，期货，股票交易API的高可扩展。</li><li>策略自定义开发。</li><li>交易状态邮件提醒功能。</li><li>账户盈亏可视化展示。</li><li>多交易所接入。</li><li>多策略执行，多标的监控。</li><li>策略交易日志展示。</li><li>多交易所，多账户资产显示</li></ul><h1 id="宽界架构"><a href="#宽界架构" class="headerlink" title="宽界架构"></a>宽界架构</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-58.png" alt="upload successful" title>                </div>                <div class="image-caption">upload successful</div>            </figure><p>技术栈：Vue/Bootstrap/jQuery/Thymeleaf/Spring Data Jpa/Spring Boot Mail/WebJars/Mysql/MongoDB/Tomcat/WebSocket</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件:"></a>组件:</h1><h2 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h2><ul><li><input checked disabled type="checkbox"> AdminEngine</li></ul><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker:"></a>Broker:</h2><ul><li><input checked disabled type="checkbox"> Gateway  </li><li><input checked disabled type="checkbox"> API</li><li><input checked disabled type="checkbox"> Router</li></ul><h2 id="CEP"><a href="#CEP" class="headerlink" title="CEP"></a>CEP</h2><ul><li><input checked disabled type="checkbox"> EventDispatcher</li><li><input disabled type="checkbox"> SignalCalculator</li><li><input disabled type="checkbox"> DataEngine</li><li><input checked disabled type="checkbox"> DataBase</li></ul><h2 id="OMS"><a href="#OMS" class="headerlink" title="OMS"></a>OMS</h2><ul><li><input checked disabled type="checkbox"> OMSEngine</li><li><input checked disabled type="checkbox"> RiskManagement</li><li><input checked disabled type="checkbox"> PositionManagement</li><li><input checked disabled type="checkbox"> EventProcessor</li></ul><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><ul><li><input checked disabled type="checkbox"> Monitor</li><li><input checked disabled type="checkbox"> Commander</li><li><input disabled type="checkbox"> Demo Strategy</li></ul><h2 id="BackTestEngine"><a href="#BackTestEngine" class="headerlink" title="BackTestEngine"></a>BackTestEngine</h2><ul><li><input disabled type="checkbox"> BackTestEngine</li><li><input disabled type="checkbox"> Matcher</li><li><input disabled type="checkbox"> Analyzer</li></ul><h1 id="宽界如何部署-使用"><a href="#宽界如何部署-使用" class="headerlink" title="宽界如何部署/使用"></a>宽界如何部署/使用</h1><h1 id="系统展示"><a href="#系统展示" class="headerlink" title="系统展示"></a>系统展示</h1><ul><li>主页<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-61.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>交易所展示: 可以展示用户当前添加的所有交易所信息<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-59.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>策略库: 展示所有添加的交易策略, 并且所有添加的策略都是可以针对多个标的<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-62.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-63.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>代理设置: 为系统添加代理服务器信息<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-65.png" alt="upload successful" title>                </div>                <div class="image-caption">upload successful</div>            </figure></li><li>个人资产: 个人资产展示<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-64.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;宽界-QuantWorld&quot;&gt;&lt;a href=&quot;#宽界-QuantWorld&quot; class=&quot;headerlink&quot; title=&quot;宽界(QuantWorld)&quot;&gt;&lt;/a&gt;宽界(QuantWorld)&lt;/h1&gt;&lt;p&gt;宽界系统（以下简称宽界）是一个基于Java的开源
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="http://itnote.tech/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Linux下线程绑定CPU</title>
    <link href="http://itnote.tech/2020/07/19/Linux%E4%B8%8BCPU%E7%BB%91%E5%AE%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://itnote.tech/2020/07/19/Linux下CPU绑定线程/</id>
    <published>2020-07-19T14:12:00.000Z</published>
    <updated>2020-07-19T15:06:10.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一般情况下，吞吐量和延迟之间是有成正比的，即吞吐量越大，任务的延迟也就越大，反之亦然。在许多的应用场景下，更希望的是吞吐量大，同时也希望保证低延迟的。<br>如果是为了满足吞吐量，但是对延迟的要求并不是特别高，只需要保证最终一致性，则多线程即可保证。但是为了保证低延迟，则更希望JVM/MicroSerivce/Machine只专注一件事。<br>实际上，单线程在专注一个任务时，效率是非常高的。为此，要保证整个系统的低延迟，单个CPU/CPU Core绑定一个JVM/MicroSerivce/Machine是一个非常好的解决方案。那如何解决呢？</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>服务之间使用高速总线/队列通信，或者其他队列或者总线，具体有Kafka，RabbitMQ, RocketMQ等等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-55.png" alt="Archtecture" title>                </div>                <div class="image-caption">Archtecture</div>            </figure><p>每个服务都是单线程。OK，可能这个时候有人问了，那么在这种情况下，多个服务就类似于多线程了，跟原来单机的多线程岂不是没有区别？实际上这是个概念问题，即并行和并发的区别。<br>简单讲一下并发和并行的区别。</p><ul><li><p>并发（Concurrent），在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。并发不是真正意义上的“同时进行”，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于CPU处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。如：打游戏和听音乐两件事情在同一个时间段内都是在同一台电脑上完成了从开始到结束的动作。那么，就可以说听音乐和打游戏是并发的。</p></li><li><p>并行（Parallel），当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。其实决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。</p></li></ul><p>总结：可以看到，在一个时间点上，<code>并发</code>只做一个任务，<code>并行</code>在做多个任务。</p><ol><li>并发是单CPU操作，牺牲线程的调度时间，完成一个多线程完成多任务的操作，主要牺牲时间。</li><li>并行是多CPU操作，系统CPU的数量，完成多个CPU完成多任务的操作，主要牺牲物理资源。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-56.png" alt="并行和并发" title>                </div>                <div class="image-caption">并行和并发</div>            </figure><p>所以总结以上，在提高任务的处理效率，降低其延时的瓶颈都落到了高速总线上了，但这不是本节所讲的重点。回归重点，如何将一个线程绑定到一个CPU上，只专注做一件事情呢？我在<code>GitHub</code>上找到了一个开源库<a href="https://github.com/OpenHFT/Java-Thread-Affinity" target="_blank" rel="noopener">Java-Thread-Affinity</a>,就能做到这件事。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>在我仔细研读<code>Java-Thread-Affinity</code>的使用介绍后，其核心主要是两点：</p><ol><li>在Linux环境下，隔离CPU，可参考：<a href="https://github.com/peter-lawrey/Java-Thread-Affinity/wiki/Getting-started" target="_blank" rel="noopener">Get Started</a></li><li>使用上述代码库,可参考：<a href="https://github.com/OpenHFT/Java-Thread-Affinity#using-affinitylock" target="_blank" rel="noopener">Using AffinityLock</a></li></ol><p>比如在我前文<a href="https://www.itnote.tech/2019/11/06/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%99%A8%EF%BC%88%E8%AE%A2%E9%98%85-%E5%8F%91%E5%B8%83%E6%A8%A1%E5%BC%8F%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">事件分发器（订阅/发布模式）的实现</a>中提到的事件分发器，我在其中设计一个定时事件，但是又想保住其任务的准时，定时器事件不受队列排队影响导致过多的延时，这时，CPU隔离就显得格外重要，活不多说，coding please。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">timer = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  AffinityLock al = AffinityLock.acquireLock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (isActive) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(interval);</span><br><span class="line">        publishTimer();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"Failed to generate timer event"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    al.release();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到我使用<code>AffinityLock.acquireLock()</code>获取一个CPU锁，这样既可以完成对CPU的隔离，并实时分发事件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;一般情况下，吞吐量和延迟之间是有成正比的，即吞吐量越大，任务的延迟也就越大，反之亦然。在许多的应用场景下，更希望的是吞吐量大，同时也希望保证
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="线程" scheme="http://itnote.tech/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HTTP和WebSocket的代理设置</title>
    <link href="http://itnote.tech/2020/06/13/Java%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
    <id>http://itnote.tech/2020/06/13/Java工程中的代理设置/</id>
    <published>2020-06-13T14:45:00.000Z</published>
    <updated>2020-06-26T02:47:03.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在项目工程实施的过程中，需要使项目可以获取一些信息，于是想到如何通过代理获取。</p><h1 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h1><ol><li>如何能够使所有的web请求的时候都走代理呢？</li></ol><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><ol><li>能否让自己的所有软件都走代理？<br> -可行，只要软件可以设置代理。</li><li>如果1可行，是否可以让Intellij走代理？<br> -可行，但是无法让Web工程全部走代理。 <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-53.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>既然2不可行，能否让JVM走代理。<br> -不知道，没找到方案。</li><li>那是否可以让HTTP请求走代理？<br> -可行，在创建RestTemplate对象的时候设置Proxy</li><li>WebSocket是否可行？<br> -可行，在创建WebSocket的时候设置Proxy即可。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>根据4,5点，可以在创建<code>RestTemplate</code>对象和<code>WebSocketClient</code>对象时候，设置代理即可。<br>以下的<code>MyRestApi</code>继承了<code>RestTemplate</code>父类，在构造对象的时候设置了代理。本地代理使用的是<code>SOCK5</code>协议，所以在获取<code>Proxy</code>的时候，使用的是<code>SOCKS</code>。在<code>Prxoy</code>类中，默认情况下使用的是直连，即<code>DIRECT</code>，而此处用的是<code>SOCKS</code>，如果你的有设置<code>HTTP</code>代理，代码中使用<code>HTTP</code>应该也可以。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-54.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">  Proxy proxy = ProxyUtil.getProxy();</span><br><span class="line">  factory.setProxy(proxy);</span><br><span class="line">  factory.setConnectTimeout(<span class="number">3000</span>);</span><br><span class="line">  factory.setReadTimeout(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">super</span>.setRequestFactory(factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyUtil &#123;</span><br><span class="line">  @NotNull</span><br><span class="line">  public static Proxy getProxy() &#123;</span><br><span class="line">    return new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(&quot;127.0.0.1&quot;, 1234));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">此处1234是SOCKS的代理端口。</span><br></pre></td></tr></table></figure><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public MyWebSocketApiBase(String uri, BaseGateway gateway) throws URISyntaxException &#123;</span><br><span class="line">  super(new URI(uri), new Draft_6455());</span><br><span class="line">  super.setProxy(ProxyUtil.getProxy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在项目工程实施的过程中，需要使项目可以获取一些信息，于是想到如何通过代理获取。&lt;/p&gt;
&lt;h1 id=&quot;问题点&quot;&gt;&lt;a href=&quot;#问
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="代理" scheme="http://itnote.tech/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>盘口数据深度合并问题</title>
    <link href="http://itnote.tech/2020/03/09/%E4%BA%A4%E6%98%93%E6%95%B0%E6%8D%AE%E6%B7%B1%E5%BA%A6%E5%90%88%E5%B9%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://itnote.tech/2020/03/09/交易数据深度合并问题/</id>
    <published>2020-03-08T19:08:00.000Z</published>
    <updated>2020-06-26T02:53:51.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>看到一些股票数据或者数字货币的市场交易深度数据, 不同的价位, 交易的数量不同. 因为买价和卖价精度问题, 这就导致了市场深度可以非常深, 如下图所示:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-52.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这是一个火币网数字货币市场交易深度的示例图, 在页面上能看到100个深度, 实际在Rest API请求数据的时候,返回的市场深度可以是150个. 当然, 有些官网也可以返回深度合并的数据. 所以我在遇到这个问题的时候, 走了一点弯路, 实现了这个小的算法问题.</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>对于盘口数据,买单向下合并，卖单向上合并. 同时, 合并的时候就遇到了几个问题需要解决.</p><ol><li>合并的精度问题</li><li>相同深度订单数量计算</li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>我找到了API文档中的ask,bid数据作为样本.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;bids&quot;: [</span><br><span class="line">  [3.7721, 344.86],// [price, quote volume]</span><br><span class="line">  [3.7709, 46.66] </span><br><span class="line">],</span><br><span class="line">&quot;asks&quot;: [</span><br><span class="line">  [3.7745, 15.44],</span><br><span class="line">  [3.7746, 70.52]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在数据样本中, bids是一个二维数组, 第一列是该深度的价格, 第二列是该深度的订单数量.<br>首先解决第一个问题, 如何解决合并深度问题:<br>比如卖单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[3.1225, 7],</span><br><span class="line">[3.1229, 1],</span><br><span class="line">[3.1231, 3],</span><br><span class="line">[3.1232, 5],</span><br><span class="line">[3.1233, 2],</span><br><span class="line">[3.1234, 1]</span><br></pre></td></tr></table></figure><p>对于上面的数据, 合并最后一位价格精度, 那深度数据是如何呢? 应该是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[3.123, 8],</span><br><span class="line">[3.124, 11]</span><br></pre></td></tr></table></figure><p>如果合并最后两位呢? 应该如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[3.13, 19]</span><br></pre></td></tr></table></figure><p>可以看到算法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> number: 价格</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> precision： 精度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>： 向上合并后的价格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCeilByLastNumber</span><span class="params">(<span class="keyword">float</span> number, <span class="keyword">int</span> precision)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 精度小于0，直接返回， 不做精度计算</span></span><br><span class="line">  <span class="keyword">if</span> (precision &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算小数点后有几位</span></span><br><span class="line">  <span class="keyword">int</span> numberLengthAfterPoint = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 临时变量</span></span><br><span class="line">  <span class="keyword">float</span> tempNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 这一步的目的是为了方式0.0015这种数， 会出现1.5E-3这种科学计数法</span></span><br><span class="line">    tempNum = number + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 同上</span></span><br><span class="line">    tempNum = number - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取number的字符串表达</span></span><br><span class="line">  String numStr = tempNum + <span class="string">""</span>;</span><br><span class="line">  <span class="comment">// 以小数点分割，第二个数组元素即小数点后的数字</span></span><br><span class="line">  String[] numStrArray = numStr.split(<span class="string">"\\."</span>);</span><br><span class="line">  <span class="comment">// 得到小数点后数字的长度</span></span><br><span class="line">  numberLengthAfterPoint = numStrArray[<span class="number">1</span>].length();</span><br><span class="line">  <span class="keyword">if</span> (numberLengthAfterPoint &gt;= precision) &#123;</span><br><span class="line">    <span class="comment">// 向上取数</span></span><br><span class="line">    <span class="keyword">return</span> getCeilNumberWithPrecision(number, numberLengthAfterPoint - precision + <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCeilNumberWithPrecision</span><span class="params">(<span class="keyword">float</span> number, <span class="keyword">int</span> precision)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">float</span>) (Math.ceil(number * ((<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, precision))) / (((<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, precision)) * <span class="number">1.0f</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理, 对于向下合并也是类似的.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;看到一些股票数据或者数字货币的市场交易深度数据, 不同的价位, 交易的数量不同. 因为买价和卖价精度问题, 这就导致了市场深度可以非常深, 
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="算法" scheme="http://itnote.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用EChart图表进行数据显示</title>
    <link href="http://itnote.tech/2020/02/09/%E7%94%A8EChart%E5%9B%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA/"/>
    <id>http://itnote.tech/2020/02/09/用EChart图表进行数据显示/</id>
    <published>2020-02-09T05:22:00.000Z</published>
    <updated>2020-06-26T02:50:11.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近遇到一个问题就是如何在页面上用图表显示数据, 类似大数据可视化平台. 不过在业务需求中不需要显示这么多. 不过有个js组件—“ECharts”, 可以用来可视化数据, 是一个很好的工具.<br>官网: <a href="https://www.echartsjs.com/" target="_blank" rel="noopener">https://www.echartsjs.com/</a></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>以下是我需要的一些需求:</p><ol><li>需要显示多条曲线</li><li>需要显示两个Y轴</li><li>区间显示</li><li>鼠标悬浮时显示f(x)的值</li></ol><p>会在代码里解释, 比较方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据准备</span></span><br><span class="line"><span class="comment">// data1 和 data2 是预准备的数据,</span></span><br><span class="line"><span class="comment">// data1: 成交量, 单位是元</span></span><br><span class="line"><span class="comment">// data2: 成交利润, 单位是元</span></span><br><span class="line"><span class="keyword">var</span> data1 = [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"2014-11-13"</span>,</span><br><span class="line">        <span class="number">65</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"2014-11-14"</span>,</span><br><span class="line">        <span class="number">77</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"2014-11-15"</span>,</span><br><span class="line">        <span class="number">143</span></span><br><span class="line">      ]</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">var</span> data2 = [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"2014-11-13"</span>,</span><br><span class="line">        <span class="number">34</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"2014-11-14"</span>,</span><br><span class="line">        <span class="number">23</span></span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"2014-11-15"</span>,</span><br><span class="line">        <span class="number">55</span></span><br><span class="line">      ]</span><br><span class="line">    ];</span><br><span class="line">option = &#123;</span><br><span class="line">      tooltip: &#123;                  <span class="comment">//鼠标悬停提示内容</span></span><br><span class="line">        trigger: <span class="string">'axis'</span>,</span><br><span class="line">        axisPointer: &#123;            <span class="comment">// 坐标轴指示器，坐标轴触发有效</span></span><br><span class="line">          type: <span class="string">'cross'</span>           <span class="comment">// 十字线显示</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">        y: <span class="string">'20px'</span>,</span><br><span class="line">        data: [<span class="string">'今日成交量'</span>, <span class="string">'今日理论利润'</span>],</span><br><span class="line">        selectedMode: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      toolbox: &#123;</span><br><span class="line">        left: <span class="string">'center'</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">          dataZoom: &#123;</span><br><span class="line">            yAxisIndex: <span class="string">'none'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          dataView: &#123;&#125;,</span><br><span class="line">          restore: &#123;&#125;,</span><br><span class="line">          saveAsImage: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      dataZoom: [&#123;</span><br><span class="line">        startValue: <span class="string">'1900-01-01'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        type: <span class="string">'inside'</span></span><br><span class="line">      &#125;],</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: data2.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> item[<span class="number">0</span>];</span><br><span class="line">        &#125;),</span><br><span class="line">        silent: <span class="literal">false</span>,</span><br><span class="line">        splitLine: &#123;</span><br><span class="line">          show: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'成交量(元)'</span>,</span><br><span class="line">          nameLocation: <span class="string">'end'</span>,</span><br><span class="line">          type: <span class="string">'value'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'理论利润(元)'</span>,</span><br><span class="line">          nameLocation: <span class="string">'end'</span>,</span><br><span class="line">          type: <span class="string">'value'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// 两条曲线的数据</span></span><br><span class="line">      series: [&#123;</span><br><span class="line">        name: <span class="string">'今日成交量'</span>,</span><br><span class="line">        <span class="comment">// 平滑曲线</span></span><br><span class="line">        smooth: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 显示为line, 也可以是柱形图, 如bar</span></span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        <span class="comment">// 显示data1中的数组中, 元素子数组index为1的数据</span></span><br><span class="line">        data: data1.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> item[<span class="number">1</span>];</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        name: <span class="string">'今日理论利润'</span>,</span><br><span class="line">        type: <span class="string">'line'</span>,</span><br><span class="line">        yAxisIndex: <span class="number">1</span>,</span><br><span class="line">        smooth: <span class="literal">true</span>,</span><br><span class="line">        data: data2.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> item[<span class="number">1</span>];</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="comment">// 页面上离两边的距离</span></span><br><span class="line">      grid: &#123;</span><br><span class="line">        left: <span class="number">50</span>,</span><br><span class="line">        right: <span class="number">50</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上是在ECharts官网中的调试代码, 如果真需要在js中呈现, 需要初始化echarts, 示例代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取id为main1的DOM对象引用, 并在该对象上初始化图表</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main1'</span>));</span><br><span class="line"><span class="comment">// 图表设置option</span></span><br><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure><p>为了调试方便, 可以在ECharts官网上先调试图表的渲染是否合适, 随意找一个模版页面, 然后调试,如: <a href="https://www.echartsjs.com/examples/zh/editor.html?c=line-aqi" target="_blank" rel="noopener">https://www.echartsjs.com/examples/zh/editor.html?c=line-aqi</a></p><ul><li>调试页面: <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-51.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>按照上面的option设置, 展示如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-50.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>基本实现了功能</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>图表的展示的调试, 可以在ECharts的官网上调试.</li><li>该图表目前只是静态页面, 如果要显示后台数据, 则需要获取后台数据进行展示.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;最近遇到一个问题就是如何在页面上用图表显示数据, 类似大数据可视化平台. 不过在业务需求中不需要显示这么多. 不过有个js组件—“EChar
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="图表" scheme="http://itnote.tech/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>URL参数数据转JSON数据</title>
    <link href="http://itnote.tech/2020/01/31/URL%E5%8F%82%E6%95%B0%E6%95%B0%E6%8D%AE%E8%BD%ACJSON%E6%95%B0%E6%8D%AE/"/>
    <id>http://itnote.tech/2020/01/31/URL参数数据转JSON数据/</id>
    <published>2020-01-31T07:47:00.000Z</published>
    <updated>2020-06-26T02:54:11.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在调用jQuery.load方法时, 需要将数据Post到controller中, 问题是获取的数据是URL参数形式, 而非是JSON格式, 也没找到现成的解析方法. 当前问题只针对如何将URL参数数据转JSON. 一般是遇不到这种情况, <code>$.ajax</code>和<code>$.post</code>都支持Post JSON数据, 但是业务场景中必须要用到load方法, 于是遇到了这个问题.</p><p><strong>原数据</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;a=avalue&amp;b=bvalue&amp;object%5Bkey1%5D=value1&amp;object%5Bkey2%5D=value2&quot;</span><br></pre></td></tr></table></figure><p><strong>目标数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;:&quot;avalue&quot;,</span><br><span class="line">    &quot;b&quot;:&quot;bvalue&quot;,</span><br><span class="line">    &quot;object&quot;:&#123;</span><br><span class="line">        &quot;key1&quot;:&quot;value1&quot;,</span><br><span class="line">        &quot;key2&quot;:&quot;value2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>为解决这个问题:</p><ol><li>将URL参数数据解码</li><li>解析数据, 需注意&amp; = [] 字符</li></ol><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将URL参数数据解析成Json数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> originalString: 原始数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 解析成JSON数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">convertURLParamToJsonFormat</span><span class="params">(String originalString)</span> </span>&#123;</span><br><span class="line">  JSONObject convertedJsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 解码原始数据，以&amp;分割成字符串数组</span></span><br><span class="line">    String[] stringArray = URLDecoder.decode(originalString, <span class="string">"utf-8"</span>).split(<span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : stringArray) &#123;</span><br><span class="line">      <span class="comment">// 以=分割成key和value</span></span><br><span class="line">      String[] keyAndValue = s.split(<span class="string">"="</span>);</span><br><span class="line">      <span class="comment">// 有[和]是对象，需要特殊处理</span></span><br><span class="line">      <span class="keyword">if</span> (!keyAndValue[<span class="number">0</span>].contains(<span class="string">"["</span>) &amp;&amp; !keyAndValue[<span class="number">0</span>].contains(<span class="string">"]"</span>)) &#123;</span><br><span class="line">        <span class="comment">// 直接存入为键值对</span></span><br><span class="line">        convertedJsonObject.put(keyAndValue[<span class="number">0</span>], keyAndValue[<span class="number">1</span>]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 解析为子JSON对象，拿到子对象中的key值</span></span><br><span class="line">        String subKey = getSubUtilSimple(keyAndValue[<span class="number">0</span>], <span class="string">"\\[(.*)\\]"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 拿到key值</span></span><br><span class="line">        String key = getSubUtilSimple(keyAndValue[<span class="number">0</span>], <span class="string">"(.*)\\["</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 无该key值， 则新建JSON对象</span></span><br><span class="line">        <span class="keyword">if</span> (convertedJsonObject.get(key) == <span class="keyword">null</span>) &#123;</span><br><span class="line">          JSONObject subJsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">          subJsonObject.put(subKey, keyAndValue[<span class="number">1</span>]);</span><br><span class="line">          convertedJsonObject.put(key, subJsonObject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 有key值，则取JSON对象</span></span><br><span class="line">          JSONObject subJsonObject = (JSONObject) convertedJsonObject.get(key);</span><br><span class="line">          subJsonObject.put(subKey, keyAndValue[<span class="number">1</span>]);</span><br><span class="line">          convertedJsonObject.put(key, subJsonObject);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 拼装完成，返回结果</span></span><br><span class="line">  <span class="keyword">return</span> convertedJsonObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSubUtilSimple</span><span class="params">(String soap, String rgex, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  Pattern pattern = Pattern.compile(rgex);<span class="comment">// 匹配的模式</span></span><br><span class="line">  Matcher m = pattern.matcher(soap);</span><br><span class="line">  <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    <span class="keyword">return</span> m.group(index);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个算法只能解决当前业务场景, 在object中还有子对象, 就有问题. 同时, 如果有数组, 也没法解析. 只能说有局限性, 只能解决一部分问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在调用jQuery.load方法时, 需要将数据Post到controller中, 问题是获取的数据是URL参数形式, 而非是JSON格式,
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="算法" scheme="http://itnote.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>删除列表元素重新定位问题</title>
    <link href="http://itnote.tech/2020/01/31/%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://itnote.tech/2020/01/31/删除元素重新排序问题/</id>
    <published>2020-01-31T05:25:00.000Z</published>
    <updated>2020-01-31T08:07:17.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近碰到一个小问题, 需要在删除某个元素之后, 页面元素定位到上一个元素. 涉及的问题具体如下.</p><p>删除顶层元素, 需要定位到下面的元素.例如删除4,定位到3.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-42.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>删除中间的元素, 需要定位到上面的元素.删除3, 定位到4.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-46.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>只有一个元素的时候, 删除并返回空.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-47.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在问题中已经列举了常见情况和边界情况, 所以需要对边界问题做一些处理.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reorder page display list</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idList: 整个id列表(0,1,2,3,4)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> locatedId:需要删除的id, 如3.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getNewLocatedId</span><span class="params">(List&lt;String&gt; idList, String locatedId)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 列表遍历计数</span></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (String id : idList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (id.equals(locatedId)) &#123;</span><br><span class="line">      <span class="comment">// 找到id并记下是索引号</span></span><br><span class="line">      <span class="keyword">int</span> index = count;</span><br><span class="line">      <span class="comment">// 特殊情况处理, 遇到尾部元素, 需要取上一个元素</span></span><br><span class="line">      <span class="comment">// 常用情况处理, 取下一个元素</span></span><br><span class="line">      index = (index == idList.size() - <span class="number">1</span>) ? index - <span class="number">1</span> : index + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// index是-1的情况,必然是只有一个元素并且被删除, 所以返回空字符串.</span></span><br><span class="line">      <span class="keyword">return</span> (index != -<span class="number">1</span>) ? idList.get(index) : <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 找不到，返回空字符串</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;最近碰到一个小问题, 需要在删除某个元素之后, 页面元素定位到上一个元素. 涉及的问题具体如下.&lt;/p&gt;
&lt;p&gt;删除顶层元素, 需要定位到下
      
    
    </summary>
    
      <category term="算法" scheme="http://itnote.tech/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://itnote.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BufferedReader解决中文显示乱码问题</title>
    <link href="http://itnote.tech/2020/01/29/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://itnote.tech/2020/01/29/问题解决-显示中文乱码问题/</id>
    <published>2020-01-29T07:13:00.000Z</published>
    <updated>2020-06-26T02:55:26.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p>在前端显示的时候, 遇到了中文乱码问题.这导致了在UI上无法正常显示中文. 遇到的问题是在通过读取properties文件, 然后根据键值对的value值显示. 例子如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-41.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>修改前的源码如下:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = getClass().getResourceAsStream(<span class="string">"/i18n/"</span> + name + <span class="string">".properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">  properties.load(inputStream);</span><br><span class="line">  model.addAttribute(<span class="string">"properties"</span>, properties);</span><br><span class="line">  inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h2><p>用BufferedReader去读取InputStream, 再load成properties对象.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = getClass().getResourceAsStream(<span class="string">"/i18n/"</span> + name + <span class="string">".properties"</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">  BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">  properties.load(bf);</span><br><span class="line">  model.addAttribute(<span class="string">"properties"</span>, properties);</span><br><span class="line">  inputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题:&quot;&gt;&lt;/a&gt;问题:&lt;/h2&gt;&lt;p&gt;在前端显示的时候, 遇到了中文乱码问题.这导致了在UI上无法正常显示中文. 遇到的问题是在通过读取properties文件, 然后根据键
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="零碎问题" scheme="http://itnote.tech/tags/%E9%9B%B6%E7%A2%8E%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="http://itnote.tech/2020/01/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://itnote.tech/2020/01/18/正则表达式常用总结/</id>
    <published>2020-01-18T12:07:00.000Z</published>
    <updated>2020-03-28T13:55:51.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结自己常用的正则表达值"><a href="#总结自己常用的正则表达值" class="headerlink" title="总结自己常用的正则表达值"></a>总结自己常用的正则表达值</h1><ul><li>找到某个字符之后的字符串：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( -&gt; )(.*)</span><br></pre></td></tr></table></figure></li></ul><p>找到” -&gt; “之后的字符串，例如：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-38.png" alt="例图" title>                </div>                <div class="image-caption">例图</div>            </figure><ul><li>匹配某一个段字符：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;.*?&quot;</span><br></pre></td></tr></table></figure></li></ul><p>找到”中间的字符串。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-40.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>匹配数字: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-?[0-9]+.*[0-9]*</span><br></pre></td></tr></table></figure></li></ul><p>判断当前字符串是不是数字:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.matches(<span class="string">"-?[0-9]+.*[0-9]*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-48.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>匹配空行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\s*)\r\n</span><br></pre></td></tr></table></figure><ul><li>匹配不想包含某些字符串的行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((?!不想包含的字符串).)*$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总结自己常用的正则表达值&quot;&gt;&lt;a href=&quot;#总结自己常用的正则表达值&quot; class=&quot;headerlink&quot; title=&quot;总结自己常用的正则表达值&quot;&gt;&lt;/a&gt;总结自己常用的正则表达值&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;找到某个字符之后的字符串：&lt;figure cla
      
    
    </summary>
    
      <category term="问题总结" scheme="http://itnote.tech/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="正则表达式" scheme="http://itnote.tech/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>刷票作弊脚本</title>
    <link href="http://itnote.tech/2019/11/08/%E5%88%B7%E7%A5%A8%E4%BD%9C%E5%BC%8A%E8%84%9A%E6%9C%AC/"/>
    <id>http://itnote.tech/2019/11/08/刷票作弊脚本/</id>
    <published>2019-11-08T04:32:00.000Z</published>
    <updated>2019-11-11T01:50:16.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题与分析"><a href="#问题与分析" class="headerlink" title="问题与分析"></a>问题与分析</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近有个朋友问我能不能帮我写个脚本投投票啊，我看今天有人一下子多了4万的投票，这肯定是作弊啊，你能不能帮帮我？我就很好奇这到底是什么原因。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>于是我打开他给我的链接一看，非常简单的投票系统，就是发一个个的Get请求就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-30.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>我看也挺简单，第一反应就直接写个python脚本去轮询。当然先用Postman做了最简单的测试，手动发了很多Get request，但是不一会儿问题来了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-31.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>需要输入验证码，短时间内过高的请求会被目标系统的反爬虫系统识别，IP会被锁定。目前有两个问题需要解决：</p><ol><li>如果需要输入验证码，该如何去解析呢？</li><li>为何IP会被封呢？</li></ol><p>针对第一个问题，首先想到的是拿到验证码的图片，然后通过开源软件库将验证码解析出来，经过分析，这个验证码是通过页面点击控件，JS代码触发Get请求生成的，这意味着很难拿到图片，即使可以，那也要通过UI的自动化框架去获取，通过点击控件，然后解析页面元素，很麻烦，而且稳定性不高。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-32.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>不过既然单个IP会被封，那么通过大量的代理IP去投票是不是就可以了？遇到验证码就换IP，这样是不是就可以规避这个问题了？不错，这是一个很好的解决办法。有了具体的方案之后，开始代码的实施。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="获取IP资源"><a href="#获取IP资源" class="headerlink" title="获取IP资源"></a>获取IP资源</h2><p>去网上花了5块钱买了两个IP资源，有效期一天，通过其API接口可以拿到有效的IP和端口号。对于IP资源，不同平台价格、时效、质量不同，网络上也有不少的IP和端口供人使用，经过尝试后都不能用，端口资源被限制。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-33.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>通过请求暴露的API接口，IP服务商会返回相关的IP信息，下面是返回是带有服务器IP和端口的响应数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="attr">"success"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"data"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ip"</span>:<span class="string">"115.213.103.48"</span>,</span><br><span class="line">            <span class="attr">"port"</span>:<span class="number">3000</span>,</span><br><span class="line">            <span class="attr">"during"</span>:<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"操作成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>每次请求，获取IP资源也是新的，所以只要在投票有问题之后，更换IP即可。 只要拿到的结果是成功的，就把IP和端口号解析出来。如果中间出现了什么Exception,那就休息一会，重新更换IP，主要是IP服务商的响应不及时，会有一些错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_http_server</span><span class="params">(self, url)</span>:</span></span><br><span class="line"></span><br><span class="line">    res = requests.get(url, timeout=<span class="number">4</span>)</span><br><span class="line">    res.encoding = <span class="string">'gb2312'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rep_dict = json.loads(res.content.decode())</span><br><span class="line">        <span class="keyword">if</span> rep_dict[<span class="string">'success'</span>] <span class="keyword">and</span> rep_dict[<span class="string">'code'</span>] == <span class="number">200</span>:</span><br><span class="line">            ip = rep_dict[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'ip'</span>]</span><br><span class="line">            port = rep_dict[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'port'</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;ip&#125;</span>:<span class="subst">&#123;port&#125;</span>"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"换IP，休息5秒"</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>下面的代码中我隐去了API信息，但是不影响逻辑。主要的逻辑是通过代理IP不断地去发送请求，将票数和排名打印出来，如果排名到了第三名，那么投票的票数就够了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(self, url_get_ip)</span>:</span></span><br><span class="line">    url = <span class="string">'vote request url'</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    ip_port = self.getHttpServer(url_get_ip)</span><br><span class="line">    <span class="keyword">if</span> ip_port:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                proxies = &#123;</span><br><span class="line">                    <span class="string">"http"</span>: <span class="string">"http://&#123;&#125;"</span>.format(ip_port), <span class="string">"https"</span>: <span class="string">"https://&#123;&#125;"</span>.format(ip_port)</span><br><span class="line">                &#125;</span><br><span class="line">                res = s.get(url, headers=self.headers, proxies=proxies, timeout=<span class="number">10</span>)</span><br><span class="line">                res.encoding = <span class="string">'gb2312'</span></span><br><span class="line">                rep_dict = json.loads(res.content.decode())</span><br><span class="line">                print(<span class="string">f"票数:<span class="subst">&#123;rep_dict[<span class="string">'data'</span>][<span class="string">'count'</span>]&#125;</span> ===&gt; 排名: <span class="subst">&#123;rep_dict[<span class="string">'data'</span>][<span class="string">'rank'</span>]&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">if</span> rep_dict[<span class="string">'data'</span>][<span class="string">'rank'</span>] == <span class="number">3</span>:</span><br><span class="line">                    self.not_enough = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> rep_dict[<span class="string">'data'</span>][<span class="string">'msg'</span>] == <span class="string">'need_captcha'</span>:</span><br><span class="line">                    print(<span class="string">'验证码校验，准备换IP'</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">'投票有点小问题，pass'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>到目前为止，已经刷到了前5名。这篇文章的目的不是说做什么偏门作弊的东西，只是个人的一种技术尝试，我觉很有意思，就记下来了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-34.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>仅供学习和参考：<br><a href="https://github.com/SouthernYard/vote" target="_blank" rel="noopener">https://github.com/SouthernYard/vote</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题与分析&quot;&gt;&lt;a href=&quot;#问题与分析&quot; class=&quot;headerlink&quot; title=&quot;问题与分析&quot;&gt;&lt;/a&gt;问题与分析&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问
      
    
    </summary>
    
      <category term="爬虫" scheme="http://itnote.tech/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://itnote.tech/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>事件分发器（订阅/发布模式）的实现</title>
    <link href="http://itnote.tech/2019/11/06/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%99%A8%EF%BC%88%E8%AE%A2%E9%98%85-%E5%8F%91%E5%B8%83%E6%A8%A1%E5%BC%8F%EF%BC%89%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://itnote.tech/2019/11/06/事件分发器（订阅-发布模式）的实现/</id>
    <published>2019-11-06T12:17:00.000Z</published>
    <updated>2020-06-26T02:57:22.074Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写项目的时候需要实现一个事件分发器，事件分发器的职责是订阅和发布消息。因此在这个模式中，订阅者需要订阅自己感兴趣的事件，当事件生成的时候需要将事件发布给订阅者。这种模式的好处在于，订阅者和发布者的低耦合性，发布者不关心订阅者的具体行为，只关心订阅者所订阅的事件。订阅者也不关心发布者如何处理事件，只需要拿到自己想要的事件即可。<br>事件分发器主要有三个部分组成：</p><ol><li>订阅者：订阅事件</li><li>发布者：发布事件</li><li>事件：数据的载体</li></ol><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>需要有一个数据结构存储所有的订阅者的事件类型，该数据类型中会存储事件类型和订阅者的键值对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;EventTypeEnum, LinkedHashMap&lt;Integer, WeakReference&lt;Object&gt;&gt;&gt; events;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-35.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>当事件发布之后，会根据上面的数据结构将数据分发给各个订阅者。所以还需要一个数据结构存储各种实时产生的事件，由于系统的事件中，对事件顺序要求极高，因此存储的数据结构应该是一个队列。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-36.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Queue&lt;Event&gt; eventQueue;</span><br></pre></td></tr></table></figure><p>事件是由事件源将数据入队，所以需要一个方法将事件放入事件队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">putEvent</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> eventQueue.offer(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了以上的数据结构和方法时候，那么需要订阅者的订阅功能和发布者的发布功能。实际上在这里，事件分发器同时处理了订阅者的订阅，以及将事件发布给订阅者。<br><code>订阅功能</code>：将订阅者订阅的事件作为键，以及将订阅者的HashCode和实际对象作为值，存储在事件Map容器中。同时也支持取消事件订阅。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(EventTypeEnum eventType, Object subscriber)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!events.containsKey(eventType)) &#123;</span><br><span class="line">    events.put(eventType, <span class="keyword">new</span> LinkedHashMap&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Add</span></span><br><span class="line">  events.get(eventType).put(subscriber.hashCode(), <span class="keyword">new</span> WeakReference&lt;&gt;(subscriber));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unsubscribe</span><span class="params">(EventTypeEnum eventType, Object subscriber)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (events.containsKey(eventType)) &#123;</span><br><span class="line">    events.get(eventType).remove(subscriber.hashCode());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>发布功能</code>：注意到，在事件订阅时，我设计了一个注解，订阅者需要订阅的方法上，需要使用该注解，并说明需要订阅的事件类型。运行时使用，并用在对象方法上。发布事件时，事件分发器会通过反射调用使用该注解的方法，达到发布的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface OnEvent &#123;</span><br><span class="line">  EventTypeEnum eventType() default EventTypeEnum.EVENT_NONE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从事件队列中一一取出事件，通过订阅者订阅方法上的注解及其参数，将匹配的事件发布给订阅者。事件发布事件后，各种订阅者处理时间不太一样，有可能某些订阅的处理是阻塞的。因此我在发布事件的时，设计了异步处理事件对象。对于事件的发布，会有一个线程专门处理事件队列，不断发布事件，并将事件出队，避免事件重复发布。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event != <span class="keyword">null</span> &amp;&amp; events.containsKey(event.getType())) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;Integer, WeakReference&lt;Object&gt;&gt; subs : events.get(event.getType()).entrySet()) &#123;</span><br><span class="line">        WeakReference&lt;Object&gt; subscriberRef = subs.getValue();</span><br><span class="line">        Object subscriberObj = subscriberRef.get();</span><br><span class="line">        <span class="keyword">assert</span> subscriberObj != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Method method : subscriberObj.getClass().getDeclaredMethods()) &#123;</span><br><span class="line">          OnEvent annotation = method.getAnnotation(OnEvent.class);</span><br><span class="line">          <span class="keyword">if</span> (annotation != <span class="keyword">null</span> &amp;&amp; annotation.eventType().equals(event.getType())) &#123;</span><br><span class="line"><span class="comment">//             异步处理事件</span></span><br><span class="line">             CompletableFuture.runAsync(() -&gt; deliverEvent(subscriberObj, method, event));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">deliverEvent</span><span class="params">(T subscriber, Method method, Event event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">boolean</span> methodFound = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">final</span> Class paramClass : method.getParameterTypes()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (paramClass.equals(event.getClass())) &#123;</span><br><span class="line">          methodFound = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (methodFound) &#123;</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        method.invoke(subscriber, event);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">"Deliver message has failed"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对于事件分发器，还有开始运行和结束功能，以及时间事件的发布和订阅，具体可以参考示例代码。</p><h1 id="代码及示例"><a href="#代码及示例" class="headerlink" title="代码及示例"></a>代码及示例</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-37.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如上图所示，事件分发器在运行之后，会将时间事件自动分发给subscriber。<br>示例代码:<a href="https://github.com/SouthernYard/EventDispatcher" target="_blank" rel="noopener">https://github.com/SouthernYard/EventDispatcher</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写项目的时候需要实现一个事件分发器，事件分发器的职责是订阅和发布消息。因此在这个模式中，订阅者需要订阅自己感兴趣的事件，当事件生成的时候需要将事件发布给订阅者。这种模式的好处在于，订阅者和发布者的低耦合性，发布者不关心订阅者的具体行为，只关心订阅者所订阅的事件。订阅者
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Java" scheme="http://itnote.tech/tags/Java/"/>
    
      <category term="设计模式" scheme="http://itnote.tech/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>爬取全国所有手机号码</title>
    <link href="http://itnote.tech/2019/11/01/%E7%88%AC%E5%8F%96%E4%B8%8A%E6%B5%B7%E5%B8%82%E7%9A%84%E6%89%80%E6%9C%89%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/"/>
    <id>http://itnote.tech/2019/11/01/爬取上海市的所有电话号码/</id>
    <published>2019-11-01T12:10:00.000Z</published>
    <updated>2019-11-01T15:31:36.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前支付宝可以分享红包，当收到红包的人点开你分享的支付宝口令之后，这个人就会有相应的红包额度。如果这个人在设定的时间内可以用掉这个额度，那你也相应会获得相同的红包数量。当时有人也因此发了笔大财，怎么做的呢？有人会通过群发大量的短信，当很多人收到短信然后会点进支付宝app，然后自己也会有相应的收益。</p><p> 当然这篇文章的主题不是为了如何赚钱，而是我在思考类似的问题时，想到如何能获取大量的手机号码呢？爬虫一般会遇到信息安全问题，很多涉及个人隐私，所以这里的代码仅供参考。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p> 首先我找到了一个网站，<a href="http://so.qqdna.com/" target="_blank" rel="noopener">手机全能查</a>，按照这里的分类，应该是包含了全中国所有人的手机号码。作为示范，我先尝试爬取的是上海下面的所有手机号码。</p><p><img src="/images/pasted-23.png" alt></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-24.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-25.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>根据上面三张图可以看到，三大运营商的上海地区号码都可以在这个<a href="http://so.qqdna.com/city/shanghai/shanghai.php" target="_blank" rel="noopener">链接</a>下面找到.</p><p>我随便点击某个号码段，审查网页元素。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-26.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>可以看到这是一个静态网页，所以解决方案有了：</p><ol><li>获取不同号码段</li><li>在不同号码段下，请求页面，并通过正则表达式将号码解析出来</li><li>将号码存在文件中</li></ol><p>OK，下面开始coding。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>对于爬虫来讲，Python是很好的工具，<code>requests</code>和<code>BeautifulSoup</code>都是Python爬虫中很实用的模块。代码也是按前面所述的步骤实现的。</p><ol><li>获取不同号码段：</li></ol><p>通过这个类去获取所有的号码段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetPhoneSegment</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/66.0.3359.117 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.url = <span class="string">'http://so.qqdna.com/city/shanghai/shanghai.php'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_seg_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = requests.get(self.url)</span><br><span class="line">        res.encoding = <span class="string">'gb2312'</span></span><br><span class="line">        bs = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</span><br><span class="line">        all_seg = bs.findAll(<span class="string">'li'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.filter_data(all_seg)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_data</span><span class="params">(original_data)</span>:</span></span><br><span class="line">        rr = re.compile(<span class="string">r'[1][0-9]+'</span>)</span><br><span class="line">        list_string_data = rr.findall(str(original_data))</span><br><span class="line">        data_remove_dup = list(set(list_string_data))</span><br><span class="line">        data_remove_dup.sort(key=list_string_data.index)</span><br><span class="line">        <span class="keyword">return</span> data_remove_dup</span><br></pre></td></tr></table></figure><p>获取号码段的目的是为了拼装不同号码段所对应的URL。</p><ol start="2"><li>在不同号码段下，请求页面，并通过正则表达式将号码解析出来</li></ol><p>通过这个类获取不同的号码段下的所有号码，通过正则表达式解析所有的号码，最后将文件保存到硬盘上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetPhoneNumber</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                          <span class="string">'Chrome/66.0.3359.117 Safari/537.36'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_phone_num</span><span class="params">(self, seg_phone_num)</span>:</span></span><br><span class="line">        url = <span class="string">'http://so.qqdna.com/mobile/shanghai_'</span> + seg_phone_num + <span class="string">'.html'</span></span><br><span class="line">        res = requests.get(url)</span><br><span class="line">        res.encoding = <span class="string">'gb2312'</span></span><br><span class="line">        bf = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="keyword">return</span> str(self.filter_data(bf.body.table.tr.td))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_data</span><span class="params">(original_data)</span>:</span></span><br><span class="line">        rr = re.compile(<span class="string">r'[1][0-9][0-9]&#123;9&#125;'</span>)</span><br><span class="line">        list_string_data = str(rr.findall(str(original_data))[<span class="number">2</span>:])</span><br><span class="line">        filtered_data = list_string_data.replace(<span class="string">r'['</span>, <span class="string">''</span>)</span><br><span class="line">        filtered_data = filtered_data.replace(<span class="string">r']'</span>, <span class="string">''</span>)</span><br><span class="line">        filtered_data = filtered_data.replace(<span class="string">r"', '"</span>, <span class="string">'\n'</span>)</span><br><span class="line">        filtered_data = filtered_data.replace(<span class="string">r"'"</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> filtered_data</span><br></pre></td></tr></table></figure><ol start="3"><li>将号码存在文件中<br>在下面的主函数中可以看到,将获取到的手机号码存储在txt文本中。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_phone_seg = GetPhoneSegment()</span><br><span class="line">    seg_num_list = get_phone_seg.get_seg_num()</span><br><span class="line">    get_num = GetPhoneNumber()</span><br><span class="line">    print(<span class="string">"号码段数量："</span> + str(len(seg_num_list)))</span><br><span class="line">    <span class="keyword">for</span> seg_num <span class="keyword">in</span> seg_num_list:</span><br><span class="line">        data = get_num.get_phone_num(seg_num)</span><br><span class="line">        fo = open(seg_num + <span class="string">'.txt'</span>, <span class="string">'w'</span>)  <span class="comment"># a: 追加， w: 覆盖</span></span><br><span class="line">        fo.write(data)</span><br><span class="line">        fo.close()</span><br></pre></td></tr></table></figure></li></ol><h1 id="跑起来"><a href="#跑起来" class="headerlink" title="跑起来!"></a>跑起来!</h1><p>为了验证代码可以正常运行, 直接运行看是否能够下载号码。由于是公司的电脑, 隐去了一些个人信息。 由下图可以看到, 上海市所有的号码段有5880个, 基本上一个号码段是9999个, 按照1万个计算, 上海市的号码数量是5880万个左右, 还是有点多的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-27.png" alt="运行中" title>                </div>                <div class="image-caption">运行中</div>            </figure><p>运行一段时间后, 可以看到文本文件中已经有不少号码了。当然我并没有把将近六千万的号码全部下载完……电脑吃不消,我也不需要这么多。当然为了避免总是在一个号码段下载号码, 可以加入随机函数, 比如说在一个号码段中取10个, 这样也有将近6万个号码，看个人需求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-28.png" alt="号码" title>                </div>                <div class="image-caption">号码</div>            </figure><p>这个是完整代码：<a href="https://github.com/SouthernYard/GetNumber" target="_blank" rel="noopener">https://github.com/SouthernYard/GetNumber</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;之前支付宝可以分享红包，当收到红包的人点开你分享的支付宝口令之后，这个人就会有相应的红包额度。如果这个人在设定的时间内可以用掉这个额度，那你
      
    
    </summary>
    
      <category term="爬虫" scheme="http://itnote.tech/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://itnote.tech/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>对作弊行为的视频进行数据标注</title>
    <link href="http://itnote.tech/2019/08/26/%E5%AF%B9%E4%BD%9C%E5%BC%8A%E8%A1%8C%E4%B8%BA%E7%9A%84%E8%A7%86%E9%A2%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%87%E6%B3%A8/"/>
    <id>http://itnote.tech/2019/08/26/对作弊行为的视频进行数据标注/</id>
    <published>2019-08-26T04:40:00.000Z</published>
    <updated>2019-11-01T12:08:20.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在参加一个作弊行为分析的比赛，数据集是由比赛方提供的，也是被标注的。对于数据标注，我也进行了一些尝试。</p><h2 id="赛题"><a href="#赛题" class="headerlink" title="赛题"></a>赛题</h2><p>我们最终目标是从真实考场视频录像中检测出谁在什么时候作弊，以及作弊的类型，如看手机，扔纸团等。<br>现阶段我们通过员工录制模拟作弊视频，视频有十段，每段比较类似，都是考场固定30个座位，有二，三十人按照以下顺序作弊：<br>作弊类型：（视频也是根据这个顺序录制的，扔是单人行动，传是两人手与手之间的传动）<br>1.拿出包放到桌上，<br>2.低头拿出手机等偷看<br>3.扔纸团到前桌桌上<br>4.扔纸团给后桌桌上，<br>5.扔纸团给左边桌上<br>6.扔纸团给右边桌上<br>7.传纸条给前桌<br>8.传纸条给后桌<br>9.传纸条给左桌<br>10.传纸条给右桌<br>11.扔纸团到前桌地上<br>12.扔纸团到后桌地上<br>13.扔纸团到左桌地上<br>14.扔纸团到右桌地上<br>15.捡纸团 （捡纸团可能出现在前面行动中，因为可能纸团掉在地上都会去捡）<br>16.打开纸团 （打开纸团前面行动也会有，不管是扔纸团还是传）<br>带试卷出场</p><h1 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h1><p>对于视频数据的标注的要求是需要找出各种作弊行为对应的所在帧数。<br>第一行是关注区域<code>四个点坐标</code>，这个区域不能太大，以至于其他同学干扰，不能太小，以至于关注的人动作被剪裁。<br>第二行开始每一个作弊行为一行，每一行<code>起始帧</code>，<code>结束帧</code>，<code>作弊类型</code>。下图就是示例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-20.png" alt="数据示例" title>                </div>                <div class="image-caption">数据示例</div>            </figure><p>对于视频数据的标注，就需要用到OpenCV了，初步的想法是：</p><ol><li>将指定个某个人的位置框出来</li><li>实时显示帧率</li></ol><p>不过这也有个小问题，人的动作行为太快，帧率也很快，人工标注是有误差的。尽管如此，我还是对几个样本数据进行了标注，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">'./7.mp4'</span>)</span><br><span class="line">frame_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="literal">True</span>:</span><br><span class="line">        frame = frame[<span class="number">100</span>:<span class="number">250</span>,<span class="number">950</span>:<span class="number">1100</span>]</span><br><span class="line">        font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">        frame_count = frame_count + <span class="number">1</span></span><br><span class="line">        cv2.putText(frame, str(frame_count),(<span class="number">0</span>,<span class="number">30</span>), font, <span class="number">0.5</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">2</span>,cv2.LINE_AA)</span><br><span class="line">        cv2.imshow(<span class="string">'frame'</span>,frame)</span><br><span class="line">        c = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == ord(<span class="string">' '</span>):</span><br><span class="line">            cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">elif</span> c == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>左上角的白色数据就是帧数，这里的视频就是规定显示的视频区域，由此可以根据要求标注数据。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-22.png" alt="区域视频" title>                </div>                <div class="image-caption">区域视频</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近在参加一个作弊行为分析的比赛，数据集是由比赛方提供的，也是被标注的。对于数据标注，我也进行了一些尝试。&lt;/p&gt;
&lt;h2 id=&quot;赛题&quot;&gt;
      
    
    </summary>
    
      <category term="数据标注" scheme="http://itnote.tech/categories/%E6%95%B0%E6%8D%AE%E6%A0%87%E6%B3%A8/"/>
    
    
      <category term="数据标注" scheme="http://itnote.tech/tags/%E6%95%B0%E6%8D%AE%E6%A0%87%E6%B3%A8/"/>
    
      <category term="视频" scheme="http://itnote.tech/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="机器学习" scheme="http://itnote.tech/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="OpenCV" scheme="http://itnote.tech/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>如何在云服务器上搭建Hexo博客</title>
    <link href="http://itnote.tech/2019/08/10/%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://itnote.tech/2019/08/10/在云服务器上搭建Hexo博客/</id>
    <published>2019-08-10T08:49:00.000Z</published>
    <updated>2020-06-26T02:55:59.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近搭建一个自己的博客，历时一个星期的空余时间。搭建博客的主要目的是想记录自己的技术笔记和心得，方便与人分享和自己查阅。很久以前我就有搭建博客的想法，但是没有实践，一个是懒，一个是没有找到合适的博客系统。后来发现<code>Hexo</code>这个博客系统，感觉不错，但是看了一些教程，感觉搭建起来很麻烦，我就又放弃了，最近在朋友的鼓励下，终于把想法实践了。</p><p>在搭建博客之前，我对比了自己知道两个博客系统，<code>WordPress</code>和<code>Hexo</code>。</p><table><thead><tr><th><strong>WordPress:</strong></th><th align="left"></th></tr></thead><tbody><tr><td><strong>优点</strong></td><td align="left"><strong>缺点</strong></td></tr><tr><td>容易搭建，上手快</td><td align="left">臃肿不轻便</td></tr><tr><td>主题多</td><td align="left">需要提供服务器和域名</td></tr><tr><td>插件多</td><td align="left"></td></tr></tbody></table><table><thead><tr><th><strong>Hexo:</strong></th><th align="left"></th></tr></thead><tbody><tr><td><strong>优点</strong></td><td align="left"><strong>缺点</strong></td></tr><tr><td>轻便：全是静态文件</td><td align="left">只能在本地电脑工作</td></tr><tr><td>简洁：天然支持MarkDown</td><td align="left">维护不便</td></tr><tr><td>免费：GitHub</td><td align="left"></td></tr></tbody></table><p>先前搭建过<code>WordPress</code>, 我并不是很喜欢<code>WordPress</code>的主题风格，个人认为不太适合写技术博客，找了些主题后，没有发现自己喜欢的。看到一些技术大佬很多在用<code>Hexo</code>的博客，并且对比了优缺点，最终决定搭建基于<code>Hexo</code>的博客。根据<code>Hexo</code>的缺点，我萌生了一个想法：能不能将Hexo搭建在云服务上？找了相关资料，确实有人这么做。本片博客主要解决了以下几个问题。</p><ol><li>在云服务器上搭建<code>Hexo</code>博客系统</li><li>在线编辑和发布博客</li><li>配置Https</li></ol><h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="服务器和域名"><a href="#服务器和域名" class="headerlink" title="服务器和域名"></a>服务器和域名</h2><p>服务器是在<code>阿里云</code>上买的最低配置的香港服务器，因为香港服务器不需要备案就能直接访问，同时速度也不会太差。同时域名也是在<code>阿里云</code>上购买的。</p><h3 id="服务器版本"><a href="#服务器版本" class="headerlink" title="服务器版本"></a>服务器版本</h3><p>CentOS 7.4</p><h2 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h2><p>Hexo的搭建过程网上有太多，没必要重复造轮子，没搭建过的朋友可以参考<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">这篇博文</a>。</p><p>我的博客用的主题是<a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">Indigo</a>,其中不少问题都可以在WiKi中找到。</p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>在搭建完成之后，服务器的运行需要依赖于<code>hexo-server</code>和<code>hexo-admin</code>。如果已经安装，可以跳过此步骤。</p><p>cd到博客根目录下，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server@0.3.1 --save</span><br><span class="line">npm install hexo-admin@2.3.0 --save</span><br></pre></td></tr></table></figure><p>安装完毕之后，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，访问<a href="http://yourServerIP:4000" target="_blank" rel="noopener">http://yourServerIP:4000</a>, 即可预览，访问<a href="http://yourServerIP:4000/admin" target="_blank" rel="noopener">http://yourServerIP:4000/admin</a>, 即可进入<code>hexo-admin</code>后台管理界面。</p><p>hexo-admin默认是没有密码保护，需要自己手动开启。在进入后台管理页面时，点击<code>Settings--Setup authentification here</code>设置后台管理密码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-6.png" alt="Setting" title>                </div>                <div class="image-caption">Setting</div>            </figure><p>输入用户名密码之后，将生成的代码复制。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-9.png" alt="Admin Config Section" title>                </div>                <div class="image-caption">Admin Config Section</div>            </figure><p>然后打开博客根目录下的<code>_config.yml</code>，将复制的代码粘贴到末尾。<br>重启hexo服务器，进入<a href="http://yourServerIP:4000/admin" target="_blank" rel="noopener">http://yourServerIP:4000/admin</a>, 如果出现登录界面，则设置成功。</p><h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>因为shell关掉或者使用<code>ctrl+c</code>关闭，则会导致服务器结束进程。所以我写了个JS脚本，执行之后，后台会一直运行hexo服务器。<br>安装pm2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  install -g pm2</span><br></pre></td></tr></table></figure><p>在博客根目录下创建一个hexo_run.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line">exec(<span class="string">'hexo server'</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'exec error: $&#123;error&#125;'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'stdout: $&#123;stdout&#125;'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'stderr: $&#123;stderr&#125;'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在根目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start hexo_run.js</span><br></pre></td></tr></table></figure><p>这样hexo服务器就能一直在后台运行不会被杀死。</p><h2 id="Hexo部署"><a href="#Hexo部署" class="headerlink" title="Hexo部署"></a>Hexo部署</h2><p>每次都用通过指令来部署，那是相当难受的。不过<code>hexo-admin</code>提供了一键部署功能：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-11.png" alt="Deploy" title>                </div>                <div class="image-caption">Deploy</div>            </figure><p>通过点击<code>Deploy</code>按钮就能执行你的部署脚本。在博客根目录下添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">deployCommand: &apos;./hexo-deploy.sh&apos;</span><br></pre></td></tr></table></figure><p>并且在根目录下创建<code>hexo-deploy.sh</code>，并编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>给hexo-deploy.sh授予权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x hexo-deploy.sh</span><br></pre></td></tr></table></figure><p>重启服务器之后，编辑博文后点击Deploy按钮就能将文章渲染成html页面访问了。</p><h2 id="与Github-Page同步"><a href="#与Github-Page同步" class="headerlink" title="与Github Page同步"></a>与Github Page同步</h2><p>GitHub的配置可以参考前文中所提到的博客搭建文章，里面有详细的配置过程。如果需要与Github page同步，则修改<code>hexo-deploy.sh</code>就可以了。<br>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>然后重启服务器，点击Deploy按钮即可，之后的改动都会同步到Github上。</p><h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><h2 id="DNS解析配置"><a href="#DNS解析配置" class="headerlink" title="DNS解析配置"></a>DNS解析配置</h2><p>进入域名的DNS解析中，按如下配置即可：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-13.png" alt="DNS解析" title>                </div>                <div class="image-caption">DNS解析</div>            </figure><p>然后访问你的域名，查看是否能访问到博客页面。</p><h2 id="配置Https"><a href="#配置Https" class="headerlink" title="配置Https"></a>配置Https</h2><p>关于Https的配置，可以参考<a href="https://www.jianshu.com/p/8046a12fec4a" target="_blank" rel="noopener">这篇博文</a>。<br>需要在阿里云购买云盾证书，并添加解析。在下载完证书之后需要在<code>nginx.conf</code>中配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen       80;</span><br><span class="line">     server_name  www.itnote.tech;</span><br><span class="line">     return 301 https://www.itnote.tech$request_uri;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  www.itnote.tech;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate      /usr/local/nginx/cert/pem_file.pem; #证书地址</span><br><span class="line">    ssl_certificate_key   /usr/local/nginx/cert/key_file.key; #证书地址</span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         proxy_pass         http://localhost:4000/;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>保存后重启nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>看上图中有锁状的地址即配置成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pasted-15.png" alt="Https Cert" title>                </div>                <div class="image-caption">Https Cert</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近搭建一个自己的博客，历时一个星期的空余时间。搭建博客的主要目的是想记录自己的技术笔记和心得，方便与人分享和自己查阅。很久以前我就有搭建博
      
    
    </summary>
    
      <category term="技术分享" scheme="http://itnote.tech/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="博客" scheme="http://itnote.tech/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://itnote.tech/tags/Hexo/"/>
    
      <category term="Https" scheme="http://itnote.tech/tags/Https/"/>
    
      <category term="WordPress" scheme="http://itnote.tech/tags/WordPress/"/>
    
  </entry>
  
</feed>
